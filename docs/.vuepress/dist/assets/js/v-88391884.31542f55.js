"use strict";(self.webpackChunktreasure_chest=self.webpackChunktreasure_chest||[]).push([[301],{879:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-88391884",path:"/Spring-AOP.html",title:"Spring AOP 总结",lang:"en-US",frontmatter:{title:"Spring AOP 总结",date:"2018-05-30T00:32:50.000Z",categories:["Notes"],tags:["Java","Spring"]},excerpt:'<p><strong>这种在运行时，动态地将代码切入到类的指定方法、指定位置上的编程思想就是面向切面的编程</strong></p>\n<h2 id="一、spring-aop-原理总结" tabindex="-1"><a class="header-anchor" href="#一、spring-aop-原理总结" aria-hidden="true">#</a> 一、Spring AOP 原理总结</h2>\n<h3 id="动态代理" tabindex="-1"><a class="header-anchor" href="#动态代理" aria-hidden="true">#</a> #动态代理</h3>\n<ul>\n<li><strong>JDK 动态代理</strong>：只能为接口创建动态代理实例，而不能针对类 。</li>\n<li><strong>CGLib（Code Generation Library）动态代理</strong>：可以为任何类创建织入横切逻辑代理对象，主要是对指定的类生成一个子类，覆盖其中的方法，因为是继承，所以该类或方法最好不要声明成 <code>final</code>。</li>\n</ul>\n<h3 id="原理对比" tabindex="-1"><a class="header-anchor" href="#原理对比" aria-hidden="true">#</a> #原理对比</h3>\n<ul>\n<li><strong>JDK动态代理</strong>：JDK动态代理技术。通过需要代理的目标类的 <code>getClass().getInterfaces()</code> 方法获取到接口信息（这里实际上是使用了Java反射技术。 <code>getClass()</code> 和 <code>getInterfaces()</code> 函数都在Class类中，Class对象描述的是一个正在运行期间的Java对象的类和接口信息），通过读取这些代理接口信息生成一个实现了代理接口的动态代理Class（动态生成代理类的字节码），然后通过反射机制获得动态代理类的构造函数，并利用该构造函数生成该Class的实例对象（<code>InvokeHandler</code> 作为构造函数的入参传递进去），在调用具体方法前调用 <code>InvokeHandler</code> 来处理。</li>\n<li><strong>CGLib动态代理</strong>：字节码技术。利用 asm 开源包，把代理对象类的 class 文件加载进来，通过修改其字节码生成子类来处理。采用非常底层的字节码技术，为一个类创建子类，并在子类中采用方法拦截的技术拦截所有父类方法的调用，并顺势织入横切逻辑。</li>\n</ul>\n',headers:[{level:2,title:"一、Spring AOP 原理总结",slug:"一、spring-aop-原理总结",children:[{level:3,title:"#动态代理",slug:"动态代理",children:[]},{level:3,title:"#原理对比",slug:"原理对比",children:[]},{level:3,title:"#AOP 术语",slug:"aop-术语",children:[]},{level:3,title:"#AOP 的动态代理",slug:"aop-的动态代理",children:[]}]},{level:2,title:"二、Spring AOP 的使用",slug:"二、spring-aop-的使用",children:[{level:3,title:"#2.1 切点",slug:"_2-1-切点",children:[]},{level:3,title:"#2.2 使用注解创建切面",slug:"_2-2-使用注解创建切面",children:[]},{level:3,title:"#2.3 在 XML 中声明切面",slug:"_2-3-在-xml-中声明切面",children:[]}]}],filePathRelative:"Spring-AOP.md",git:{updatedTime:null,contributors:[]}}},920:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(252).uE)('<p><strong>这种在运行时，动态地将代码切入到类的指定方法、指定位置上的编程思想就是面向切面的编程</strong></p><h2 id="一、spring-aop-原理总结" tabindex="-1"><a class="header-anchor" href="#一、spring-aop-原理总结" aria-hidden="true">#</a> 一、Spring AOP 原理总结</h2><h3 id="动态代理" tabindex="-1"><a class="header-anchor" href="#动态代理" aria-hidden="true">#</a> #动态代理</h3><ul><li><strong>JDK 动态代理</strong>：只能为接口创建动态代理实例，而不能针对类 。</li><li><strong>CGLib（Code Generation Library）动态代理</strong>：可以为任何类创建织入横切逻辑代理对象，主要是对指定的类生成一个子类，覆盖其中的方法，因为是继承，所以该类或方法最好不要声明成 <code>final</code>。</li></ul><h3 id="原理对比" tabindex="-1"><a class="header-anchor" href="#原理对比" aria-hidden="true">#</a> #原理对比</h3><ul><li><strong>JDK动态代理</strong>：JDK动态代理技术。通过需要代理的目标类的 <code>getClass().getInterfaces()</code> 方法获取到接口信息（这里实际上是使用了Java反射技术。 <code>getClass()</code> 和 <code>getInterfaces()</code> 函数都在Class类中，Class对象描述的是一个正在运行期间的Java对象的类和接口信息），通过读取这些代理接口信息生成一个实现了代理接口的动态代理Class（动态生成代理类的字节码），然后通过反射机制获得动态代理类的构造函数，并利用该构造函数生成该Class的实例对象（<code>InvokeHandler</code> 作为构造函数的入参传递进去），在调用具体方法前调用 <code>InvokeHandler</code> 来处理。</li><li><strong>CGLib动态代理</strong>：字节码技术。利用 asm 开源包，把代理对象类的 class 文件加载进来，通过修改其字节码生成子类来处理。采用非常底层的字节码技术，为一个类创建子类，并在子类中采用方法拦截的技术拦截所有父类方法的调用，并顺势织入横切逻辑。</li></ul><h3 id="aop-术语" tabindex="-1"><a class="header-anchor" href="#aop-术语" aria-hidden="true">#</a> #AOP 术语</h3><ul><li><p><strong>Joinpoint（连接点）</strong><br> 程序执行的某个特定位置：如类开始初始化前，类初始化后，类某个方法调用前。一个类或一段代码拥有一些边界性质的特定点，这些代码中的特定点就被称为“连接点”。<strong>Spring仅支持方法的连接点</strong>，既仅能在方法调用前，方法调用后，方法抛出异常时等这些程序执行点进行织入增强。</p></li><li><p><strong>Pointcut（切点）</strong><br> 指定在哪些类的哪些方法上织入横切逻辑</p></li><li><p><strong>Advice（增强）</strong><br> 描述横切逻辑和方法的具体织入点（方法前、方法后、方法的两端等）</p></li><li><p><strong>Target（目标对象）</strong><br> 被AOP框架进行增强处理的对象。如果是动态AOP的框架，则对象是一个被代理的对象。</p></li><li><p><strong>Introduction（引入）</strong><br> 引入是一种特殊的增强，它为类添加一些属性和方法。这样，即使一个业务类原本没有实现某个接口，通过AOP的引介功能，我们可以动态的为该事务添加接口的实现逻辑，让业务类成为这个接口的实现类。</p></li><li><p><strong>Weaving（织入）</strong> 织入是将增强添加对目标类具体连接点上的过程</p></li><li><p><strong>代理（Proxy）</strong> 一个类被AOP织入增强后，就产生了一个结果类，它是融合了原类和增前逻辑的代理类。</p></li><li><p><strong>Aspect（切面）</strong><br> 将 <strong>Pointcut</strong> 和 <strong>Advice</strong> 两者组装起来。有了 *<strong>Aspect</strong> 的信息，Spring就可以利用JDK或CGLib的动态代理技术采用统一的方式为目标Bean创建织入切面的代理对象了</p></li></ul><h3 id="aop-的动态代理" tabindex="-1"><a class="header-anchor" href="#aop-的动态代理" aria-hidden="true">#</a> #AOP 的动态代理</h3><p>Spring AOP 基于 XML 配置的 AOP 和基于 <code>@AspcetJ</code> 注解的 AOP，这两种方法虽然在配置切面时的表现方式不同，但底层都是使用动态代理技术（JDK 代理或 CGLib 代理）。</p><p><strong>Spring 可以继承 AspcetJ，但 AspcetJ 本身并不属于 Spring AOP 的范畴</strong></p><ul><li><strong>AspectJ</strong></li></ul><p>AspectJ 在编译时“自动”编译得到了一个新类，这个新类增强了原有的 Hello.java 类的功能，因此 AspectJ 通常被称为编译时增强的 AOP 框架<br> 与 AspectJ 相对的还有另外一种 AOP 框架，它们不需要在编译时对目标类进行增强，而是运行时生成目标类的代理类，该代理类要么与目标类实现相同的接口，要么是目标类的子类——总之，代理类的实例可作为目标类的实例来使用。一般来说，编译时增强的 AOP 框架在性能上更有优势——因为运行时动态增强的 AOP 框架需要每次运行时都进行动态增强。</p><ul><li><strong>Spring AOP</strong></li></ul><p>与 AspectJ 相同的是，Spring AOP 同样需要对目标类进行增强，也就是生成新的 AOP 代理类；与 AspectJ 不同的是，Spring AOP 无需使用任何特殊命令对 Java 源代码进行编译，它采用运行时动态地、在内存中临时生成“代理类”的方式来生成 AOP 代理。<br> Spring 允许使用 AspectJ Annotation 用于定义方面（Aspect）、切入点（Pointcut）和增强处理（Advice），Spring 框架则可识别并根据这些 Annotation 来生成 AOP 代理。Spring 只是使用了和 AspectJ 5 一样的注解，但并没有使用 AspectJ 的编译器或者织入器（Weaver），底层依然使用的是 Spring AOP，依然是在运行时动态生成 AOP 代理，并不依赖于 AspectJ 的编译器或者织入器。<br> 简单地说，Spring 依然采用运行时生成动态代理的方式来增强目标对象，所以它不需要增加额外的编译，也不需要 AspectJ 的织入器支持；而 AspectJ 在采用编译时增强，所以 AspectJ 需要使用自己的编译器来编译 Java 文件，还需要织入器。</p><p>##<strong>CGLib代理与JDK动态代理</strong></p><ol><li>如果目标对象实现了接口，默认情况下会采用 JDK 的动态代理实现 AOP</li><li>如果目标对象实现了接口，可以强制使用 CGLIB 实现 AOP</li><li>如果目标对象没有实现了接口，必须采用 CGLIB 库，Spring 会自动在 JDK 动态代理和 CGLIB 之间转换</li></ol><p>##<strong>如何强制使用CGLIB实现AOP</strong></p><ol><li>添加CGLIB库</li><li>在 Spring 配置文件中加入 <code>&lt;aop:aspectj-autoproxy proxy-target-class=&quot;true&quot;/&gt;</code></li></ol><p>##<strong>AOP自动代理原理</strong></p><p>Spring提供了自动代理机制，让容器为我们自动生成代理。在内部，Spring使用 <code>BeanPostProcessor</code> 自动地完成这项工作。</p><p>这些基于 <code>BeanPostProcessor</code> 的自动代理创建器的实现类，将根据一些规则自动在容器实例化Bean时为匹配的Bean生成代理实例:</p><ul><li>基于Bean配置名规则的自动代理创建器：允许为一组特定配置名的Bean自动创建代理实例的代理创建器，实现类为 <code>BeanNameAutoProxyCreator</code></li><li>基于 <strong>Advisor</strong> 匹配机制的自动代理创建器：它会对容器中所有的 <strong>Advisor</strong> 进行扫描，自动将这些切面应用到匹配的Bean中（即为目标Bean创建代理实例），实现类为 <code>DefaultAdvisorAutoProxyCreator</code></li><li>基于Bean中 <code>AspjectJ</code> 注解标签的自动代理创建器：为包含 <code>AspectJ</code> 注解的Bean自动创建代理实例，它的实现类是 <code>AnnotationAwareAspectJAutoProxyCreator</code> ，该类是Spring 2.0的新增类。</li></ul><h2 id="二、spring-aop-的使用" tabindex="-1"><a class="header-anchor" href="#二、spring-aop-的使用" aria-hidden="true">#</a> 二、Spring AOP 的使用</h2><h3 id="_2-1-切点" tabindex="-1"><a class="header-anchor" href="#_2-1-切点" aria-hidden="true">#</a> #2.1 切点</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Performance</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">void</span> <span class="token function">perform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li><code>execution(* com.exercise.demo.aspect.component.Performance.perform(..))</code> 执行方法时触发</li><li><code>execution(* com.exercise.demo.aspect.component.Performance.perform(int ))&amp;&amp;args(test)</code> 传入参数</li><li><code>execution(* com.exercise.demo.aspect.component.Performance.perform()) &amp;&amp; within(com.exercise.demo.aspect.component.*)</code> 并且 <code>com.exercise.demo.aspect.component</code> 任意类方法被调用时</li></ul><p><strong>再切点中选择<em>Bean</em></strong></p><p><code>execution(* com.exercise.demo.aspect.component.Performance.perform()) &amp;&amp; bean(&#39;test&#39;)</code></p><p>在执行 <code>Performance</code> 的 <code>perform()</code> 方法时应用通知，但限定 <em>Bean</em> 的 ID 为 test</p><h3 id="_2-2-使用注解创建切面" tabindex="-1"><a class="header-anchor" href="#_2-2-使用注解创建切面" aria-hidden="true">#</a> #2.2 使用注解创建切面</h3><h4 id="_2-2-1-定义切面" tabindex="-1"><a class="header-anchor" href="#_2-2-1-定义切面" aria-hidden="true">#</a> ##2.2.1 定义切面</h4><table><thead><tr><th>注解</th><th>通知</th></tr></thead><tbody><tr><td><code>@After</code></td><td>通知方法会在目标方法返回或抛出异常后调用</td></tr><tr><td><code>@AfterReturning</code></td><td>通知方法会在目标方法返回后调用</td></tr><tr><td><code>@AfterThrowing</code></td><td>通知方法会在目标方法抛出异常后调用</td></tr><tr><td><code>@Around</code></td><td>通知方法会将目标方法封装起来</td></tr><tr><td><code>@Before</code></td><td>通知方法会在目标方法调用之前执行</td></tr></tbody></table><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Aspect</span>\n<span class="token annotation punctuation">@Component</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AspectConfig</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">AspectConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">&quot;execution(* com.exercise.demo.aspect.component.Animal.walk(int ))&amp;&amp;args(test)&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">silenceCellPhone</span><span class="token punctuation">(</span><span class="token keyword">int</span> test<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;test 开始是&quot;</span> <span class="token operator">+</span> test<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Silencing cell phone&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">&quot;execution(* com.exercise.demo.aspect.component.Animal.walk())&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">takeSeats</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Take seats&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>对于频繁使用的切点，可以通过 <code>@Pointcut</code> 注解，定义一次，然后每次需要的时候引用它</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Aspect</span>\n<span class="token annotation punctuation">@Component</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AspectConfig</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">AspectConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">&quot;execution(* com.exercise.demo.aspect.component.Performance.perform(..))&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">performance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">&quot;performance()&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">silenceCellPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Silencing cell phone&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p><code>performance()</code> 方法的实际内容并不重要，在这里它实际上应该是空的。其实该方法本身只是一个标识，供 <code>@Pointcut</code> 注解依附。<br></p><p>上述配置是在 Spring Boot 中配置，如果使用 JavaConfig 配置</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>\n<span class="token annotation punctuation">@EnableAspectJAutoProxy</span>\n<span class="token annotation punctuation">@ComponentScan</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TotalConfig</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Bean</span>\n    <span class="token keyword">public</span> <span class="token class-name">AspectConfig</span> <span class="token function">aspectConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AspectConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>使用 XML 配置</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.exercise.demo.aspect.component<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.exercise.demo.aspect.config.AspectConfig<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_2-2-2-创建环绕通知" tabindex="-1"><a class="header-anchor" href="#_2-2-2-创建环绕通知" aria-hidden="true">#</a> ##2.2.2 创建环绕通知</h4><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Aspect</span>\n<span class="token annotation punctuation">@Component</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AspectConfig</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">AspectConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">&quot;execution(* com.exercise.demo.aspect.component.Performance.perform(..))&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">performance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;定义总切点&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     * 创建环绕通知\n     *\n     * <span class="token keyword">@param</span> <span class="token parameter">jp</span>\n     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Throwable</span></span>\n     */</span>\n    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">&quot;performance()&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">watchPerformance</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> jp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>\n\n        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Silencing cell phones&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Taking seats&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        jp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;CLAP CLAP CLAP!!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h4 id="_2-2-3-处理通知中参数" tabindex="-1"><a class="header-anchor" href="#_2-2-3-处理通知中参数" aria-hidden="true">#</a> ##2.2.3 处理通知中参数</h4><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Aspect</span>\n<span class="token annotation punctuation">@Component</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AspectConfig</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">AspectConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">&quot;execution(* com.exercise.demo.aspect.component.Animal.walk(int )) &amp;&amp; args(test)&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">silenceCellPhone</span><span class="token punctuation">(</span><span class="token keyword">int</span> test<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;test 开始是&quot;</span> <span class="token operator">+</span> test<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Silencing cell phone&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="_2-2-4-通过注解引入新功能" tabindex="-1"><a class="header-anchor" href="#_2-2-4-通过注解引入新功能" aria-hidden="true">#</a> ##2.2.4 通过注解引入新功能</h4><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@DeclareParents</span><span class="token punctuation">(</span>\n        value <span class="token operator">=</span> <span class="token string">&quot;com.exercise.demo.aspect.component.Person+&quot;</span><span class="token punctuation">,</span>\n        defaultImpl <span class="token operator">=</span> <span class="token class-name">FoodImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Food</span> food<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>@DeclareParents</code> 注解由三部分组成：</p><ul><li><code>value</code> 属性指定了哪种类型的 <em>Bean</em> 要引入该接口。在本例中，也就是所有实现 <code>Person</code> 的类型。（标记符后面的 <code>+</code> 表示是 <code>Person</code> 的所有子类型，而不是 <code>Person</code> 本身。）</li><li><code>defaultImpl</code> 属性指定了为引入功能提供实现的类。在这里，我们指定的是 <code>FoodImpl</code> 提供实现。 public static Food food;</li><li><code>@DeclareParents</code> 注解所标注的静态属性指明了要引入了接口。在这里，我们所引入的是 <code>Food</code> 接口。</li></ul><h3 id="_2-3-在-xml-中声明切面" tabindex="-1"><a class="header-anchor" href="#_2-3-在-xml-中声明切面" aria-hidden="true">#</a> #2.3 在 XML 中声明切面</h3><p>JavaConfig 配置</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Aspect</span>\n<span class="token annotation punctuation">@Component</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AspectConfig</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">AspectConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">&quot;execution(* com.exercise.demo.aspect.component.Animal.walk(int ))&amp;&amp;args(test)&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">silenceCellPhone</span><span class="token punctuation">(</span><span class="token keyword">int</span> test<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;test 开始是&quot;</span> <span class="token operator">+</span> test<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Silencing cell phone&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">&quot;execution(* com.exercise.demo.aspect.component.Animal.walk())&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">takeSeats</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Take seats&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">&quot;execution(* com.exercise.demo.aspect.component.Performance.perform(..))&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">performance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;定义总切点&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     * 创建环绕通知\n     *\n     * <span class="token keyword">@param</span> <span class="token parameter">jp</span>\n     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Throwable</span></span>\n     */</span>\n    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">&quot;performance()&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">watchPerformance</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> jp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>\n\n        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Silencing cell phones&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Taking seats&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        jp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;CLAP CLAP CLAP!!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     * 引入新功能\n     */</span>\n    <span class="token annotation punctuation">@DeclareParents</span><span class="token punctuation">(</span>\n            value <span class="token operator">=</span> <span class="token string">&quot;com.exercise.demo.aspect.component.Person+&quot;</span><span class="token punctuation">,</span>\n            defaultImpl <span class="token operator">=</span> <span class="token class-name">FoodImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Food</span> food<span class="token punctuation">;</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div><p>对应 XML 配置</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>aspectConfig<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.exercise.test.aspect.config.AspectConfig<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>aspectConfig<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n        <span class="token comment">&lt;!--前后通知--&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">pointcut</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>execution(* com.exercise.test.aspect.component.Animal.walk())<span class="token punctuation">&quot;</span></span>\n                    <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>silenceCellPhone<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>takeSeats<span class="token punctuation">&quot;</span></span>\n                    <span class="token attr-name">pointcut</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>execution(* com.exercise.test.aspect.component.Animal.walk())<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n\n        <span class="token comment">&lt;!--环绕通知--&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>performance<span class="token punctuation">&quot;</span></span>\n                      <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>execution(* com.exercise.test.aspect.component.Performance.perform())<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>around</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>watchPerformance<span class="token punctuation">&quot;</span></span>\n                    <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>performance<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n\n        <span class="token comment">&lt;!--添加新功能--&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>declare-parents</span> <span class="token attr-name">types-matching</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.exercise.test.aspect.component.Person+<span class="token punctuation">&quot;</span></span>\n                                <span class="token attr-name">implement-interface</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.exercise.test.aspect.component.Food<span class="token punctuation">&quot;</span></span>\n                                <span class="token attr-name">default-impl</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.exercise.test.aspect.component.FoodImpl<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div>',54),t={},e=(0,a(744).Z)(t,[["render",function(n,s){return p}]])},744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);